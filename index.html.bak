<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Media Explorer</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      margin: 0;
      padding: 20px;
      background-color: #f4f4f4;
    }
    .header {
      display: flex;
      justify-content: space-between;
      align-items: center;
    }
    .file-container {
      height: 80vh;
      overflow-y: auto;
      background: #fff;
      padding: 10px;
      box-shadow: 0 0 10px rgba(0,0,0,0.1);
      display: flex;
      flex-direction: row;
      flex-wrap: wrap;
      gap: 10px;
    }
    .file-item {
      display: flex;
      flex-direction: column;
      align-items: center;
      cursor: pointer;
      position: relative;
      width: calc(33.333% - 20px);
      margin-bottom: 10px;
    }
    .file-item img, .file-item video {
      width: 100%;
      margin-bottom: 5px;
    }
    .file-info {
      display: none;
      text-align: center;
      position: absolute;
      top: -5px;
      left: 50%;
      transform: translateX(-50%);
      padding: 5px;
      background: rgba(0, 0, 0, 0.8);
      color: #fff;
      border-radius: 5px;
      z-index: 1;
      animation: rainbow 5s linear infinite;
    }
    .file-item:hover .file-info {
      display: block;
      transition: display 0.5s;
    }
    .show-info .file-info {
      display: block;
    }
    .popup {
      display: none;
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(0, 0, 0, 0.8);
      justify-content: center;
      align-items: center;
    }
    .popup-content {
      position: relative;
      background-color: #fff;
      padding: 20px;
      border-radius: 5px;
      max-width: 90%;
      max-height: 90%;
      overflow: hidden; /* Prevent scrolling */
      display: flex;
      justify-content: center;
      align-items: center;
    }
    .popup-content video {
      max-width: 100%;
      max-height: 100%;
      object-fit: contain; /* Ensures video fits within container */
      object-position: center; /* Center the video */
    }
    .close-btn, .capture-btn, .fullscreen-btn, .speed-btn, .speed-up-btn, .speed-down-btn, .save-screenshot-btn {
      background: #f00;
      color: #fff;
      border: none;
      border-radius: 50%;
      width: 24px; /* 20% larger than original 20px */
      height: 24px; /* 20% larger than original 20px */
      cursor: pointer;
      font-size: 20px; /* Adjust font size to match larger buttons */
      display: flex;
      justify-content: center;
      align-items: center;
      position: absolute;
    }
    .close-btn {
      top: -1px;
      right: -1px;
      background: #f00;
    }
    .capture-btn {
      top: -1px;
      left: -1px;
      background: #0f0;
    }
    .fullscreen-btn {
      bottom: -1px;
      right: -1px;
      background: #00f;
    }
    .speed-btn {
      bottom: -1px;
      left: 50%;
      transform: translateX(-50%);
      background: #ffa500; /* orange color */
      font-size: 12px; /* Adjust font size for smaller text */
    }
    .speed-up-btn {
      bottom: -1px;
      left: calc(50% + 30px); /* Position to the right of speed-btn */
      background: #ffa500; /* orange color */
      font-size: 12px; /* Adjust font size for smaller text */
    }
    .speed-down-btn {
      bottom: -1px;
      left: calc(50% - 60px); /* Position further to the left of speed-btn */
      background: #ffa500; /* orange color */
      font-size: 12px; /* Adjust font size for smaller text */
    }
    .save-screenshot-btn {
      bottom: -1px;
      left: -1px;
      background: #0ff; /* cyan color */
      font-size: 12px; /* Adjust font size for smaller text */
    }
    .view-toggle {
      cursor: pointer;
      font-size: 24px;
    }
    .tooltip {
      display: none;
      position: absolute;
      background: rgba(0, 0, 0, 0.8);
      color: #fff;
      padding: 5px;
      border-radius: 5px;
      z-index: 2;
      transform: translate(-50%, -50%);
      top: 50%;
      left: 50%;
      white-space: nowrap;
    }
    .show-tooltip {
      display: block;
    }
    @keyframes rainbow {
      0% { border-color: red; }
      14% { border-color: orange; }
      28% { border-color: yellow; }
      42% { border-color: green; }
      56% { border-color: blue; }
      70% { border-color: indigo; }
      84% { border-color: violet; }
      100% { border-color: red; }
    }
  </style>
</head>
<body>
  <div class="header">
    <h1>Fab Media Explorer</h1>
    <span class="view-toggle" id="viewToggle">‚ÑπÔ∏è</span>
  </div>
  <button id="openDirectoryButton">Open Directory</button>
  <div class="file-container" id="fileContainer"></div>

  <div class="popup" id="videoPopup">
    <div class="popup-content">
      <button class="close-btn" id="closePopupButton">&times;</button>
      <button class="capture-btn" id="captureButton">+</button>
      <button class="fullscreen-btn" id="fullscreenButton">‚õ∂</button>
      <button class="speed-down-btn" id="speedDownButton">&lt;&lt;</button>
      <button class="speed-btn" id="speedButton">1x</button>
      <button class="speed-up-btn" id="speedUpButton">&gt;&gt;</button>
      <button class="save-screenshot-btn" id="saveScreenshotButton">üíæ</button>
      <video controls id="videoPlayer"></video>
      <span id="videoTooltip" class="tooltip"></span>
    </div>
  </div>

  <div class="popup" id="infoPopup">
    <div class="popup-content">
      <button class="close-btn" id="closeInfoPopupButton">&times;</button>
      <div>
        <h2>Notice d'utilisation</h2>
        <p>Voici comment utiliser le Fab Media Explorer :</p>
        <ul>
          <li>Ouvrez un r√©pertoire contenant des vid√©os en cliquant sur "Open Directory".</li>
          <li>Cliquez sur une vignette pour lire la vid√©o correspondante.</li>
          <li>Utilisez les boutons du lecteur vid√©o pour capturer une image, passer en plein √©cran, ajuster la vitesse de lecture, ou sauvegarder une capture d'√©cran.</li>
          <li>Les raccourcis clavier sont :
            <ul>
              <li>Fl√®che gauche : Reculer de 10 secondes</li>
              <li>Fl√®che droite : Avancer de 10 secondes</li>
              <li>Fl√®che haut : Augmenter la vitesse de lecture</li>
              <li>Fl√®che bas : Diminuer la vitesse de lecture</li>
              <li>Espace : Lecture/Pause</li>
            </ul>
          </li>
        </ul>
      </div>
    </div>
  </div>

  <script>
    document.getElementById('openDirectoryButton').addEventListener('click', openDirectory);
    document.getElementById('closePopupButton').addEventListener('click', closePopup);
    document.getElementById('closeInfoPopupButton').addEventListener('click', closeInfoPopup);
    document.getElementById('viewToggle').addEventListener('click', showInfoPopup);
    document.getElementById('captureButton').addEventListener('mouseover', () => showTooltip('Capture une image'));
    document.getElementById('captureButton').addEventListener('mouseout', hideTooltip);
    document.getElementById('fullscreenButton').addEventListener('mouseover', () => showTooltip('Passer en plein √©cran'));
    document.getElementById('fullscreenButton').addEventListener('mouseout', hideTooltip);
    document.getElementById('speedButton').addEventListener('mouseover', () => showTooltip('Changer la vitesse de lecture'));
    document.getElementById('speedButton').addEventListener('mouseout', hideTooltip);
    document.getElementById('speedUpButton').addEventListener('mouseover', () => showTooltip('Augmenter la vitesse de lecture'));
    document.getElementById('speedUpButton').addEventListener('mouseout', hideTooltip);
    document.getElementById('speedDownButton').addEventListener('mouseover', () => showTooltip('Diminuer la vitesse de lecture'));
    document.getElementById('speedDownButton').addEventListener('mouseout', hideTooltip);
    document.getElementById('saveScreenshotButton').addEventListener('mouseover', () => showTooltip('Sauvegarder une capture d\'√©cran'));
    document.getElementById('saveScreenshotButton').addEventListener('mouseout', hideTooltip);
    document.getElementById('captureButton').addEventListener('click', captureThumbnail);
    document.getElementById('fullscreenButton').addEventListener('click', toggleFullscreen);
    document.getElementById('speedButton').addEventListener('click', changeSpeed);
    document.getElementById('speedUpButton').addEventListener('click', speedUp);
    document.getElementById('speedDownButton').addEventListener('click', speedDown);
    document.getElementById('saveScreenshotButton').addEventListener('click', saveScreenshot);
    document.addEventListener('keydown', handleKeydown);

    let currentFile;
    let currentDirectoryHandle;
    let showInfo = false;
    let videoFiles = [];
    let videoFileNames = new Set();
    let tooltipTimeout;

    const speeds = [0.1, 0.2, 0.5, 1, 2, 3, 4, 8, 16, 32];
    let currentSpeedIndex = 3;

    function toggleInfo() {
      showInfo = !showInfo;
      const fileContainer = document.getElementById('fileContainer');
      if (showInfo) {
        fileContainer.classList.add('show-info');
      } else {
        fileContainer.classList.remove('show-info');
      }
    }

    async function openDirectory() {
      try {
        currentDirectoryHandle = await window.showDirectoryPicker();
        videoFiles = [];
        videoFileNames.clear();
        await collectFiles(currentDirectoryHandle);
        displayFiles();
      } catch (err) {
        console.error('Error opening directory:', err);
      }
    }

    async function collectFiles(directoryHandle) {
      for await (const entry of directoryHandle.values()) {
        if (entry.kind === 'file') {
          const file = await entry.getFile();
          const fileNameWithoutExtension = file.name.replace(/\.[^/.]+$/, "");
          
          // Skip PNG files that are thumbnails
          if (file.type.startsWith('image/') && file.name.endsWith('.png')) {
            continue;
          }

          // Ensure that only video files are added and not their PNG thumbnails
          if (file.type.startsWith('video/')) {
            // Check if the base name is already added
            if (!videoFileNames.has(fileNameWithoutExtension)) {
              videoFileNames.add(fileNameWithoutExtension);
              videoFiles.push(file);
            }
          }
        }
      }
    }

    function displayFiles() {
      const fileContainer = document.getElementById('fileContainer');
      fileContainer.innerHTML = '';

      videoFiles.forEach(file => {
        const fileItem = document.createElement('div');
        fileItem.className = 'file-item';

        getVideoThumbnail(file).then(thumbnail => {
          if (thumbnail) {
            fileItem.appendChild(thumbnail);
          } else {
            const errorText = document.createElement('div');
            errorText.textContent = 'Thumbnail not available';
            fileItem.appendChild(errorText);
          }
        }).catch(err => {
          console.error(`Failed to load video thumbnail for ${file.name}:`, err);
          const errorText = document.createElement('div');
          errorText.textContent = 'Thumbnail not available';
          fileItem.appendChild(errorText);
        });

        fileItem.addEventListener('click', () => {
          playVideo(file);
          currentFile = file;
          disableInfo(); // Disable info when playing video
        });

        fileItem.addEventListener('mouseover', () => {
          showFileInfo(fileItem);
        });

        fileItem.addEventListener('mouseleave', () => {
          hideFileInfo(fileItem);
        });

        const fileSize = (file.size / (1024 * 1024)).toFixed(2);
        const fileInfo = document.createElement('div');
        fileInfo.className = 'file-info';
        fileInfo.textContent = `${file.name} - ${fileSize} MB`;

        fileItem.appendChild(fileInfo);
        fileContainer.appendChild(fileItem);
      });
    }

    function showFileInfo(fileItem) {
      const fileInfo = fileItem.querySelector('.file-info');
      fileInfo.style.display = 'block';
    }

    function hideFileInfo(fileItem) {
      const fileInfo = fileItem.querySelector('.file-info');
      fileInfo.style.display = 'none';
    }

    async function getVideoThumbnail(file) {
      const cacheFileName = file.name.replace(/\.[^/.]+$/, ".png");
      try {
        const cacheHandle = await currentDirectoryHandle.getFileHandle(cacheFileName, { create: false });
        const cacheFile = await cacheHandle.getFile();
        const img = document.createElement('img');
        img.src = URL.createObjectURL(cacheFile);
        return img;
      } catch (error) {
        console.warn(`No cache found for ${file.name}, generating new thumbnail.`);
        const thumbnail = await createVideoThumbnail(file);
        await saveThumbnail(thumbnail, cacheFileName, currentDirectoryHandle);
        return thumbnail;
      }
    }

    async function createVideoThumbnail(file) {
      return new Promise((resolve, reject) => {
        const video = document.createElement('video');
        const canvas = document.createElement('canvas');
        const ctx = canvas.getContext('2d');

        video.preload = 'metadata';
        video.src = URL.createObjectURL(file);

        video.onloadedmetadata = () => {
          const captureTime = video.duration * 0.75;
          video.currentTime = captureTime;
        };

        video.onseeked = () => {
          const targetWidth = 320;  // Adjust the target width for lower resolution
          const scaleFactor = targetWidth / video.videoWidth;
          const targetHeight = video.videoHeight * scaleFactor;

          canvas.width = targetWidth;
          canvas.height = targetHeight;
          ctx.drawImage(video, 0, 0, canvas.width, canvas.height);
          const img = document.createElement('img');
          img.src = canvas.toDataURL();
          URL.revokeObjectURL(video.src);
          resolve(img);
        };

        video.onerror = (e) => {
          URL.revokeObjectURL(video.src);
          reject(`Error loading video: ${e.message}`);
        };
      });
    }

    async function saveThumbnail(imgElement, fileName, directoryHandle) {
      const canvas = document.createElement('canvas');
      const ctx = canvas.getContext('2d');
      const img = new Image();
      img.src = imgElement.src;

      img.onload = async () => {
        canvas.width = img.width;
        canvas.height = img.height;
        ctx.drawImage(img, 0, 0);

        const blob = await new Promise(resolve => canvas.toBlob(resolve, 'image/png'));
        const newFileHandle = await directoryHandle.getFileHandle(fileName, { create: true });
        const writable = await newFileHandle.createWritable();
        await writable.write(blob);
        await writable.close();

        // Refresh the thumbnail display after saving
        displayFiles();
      };
    }

    async function captureThumbnail() {
      if (!currentFile || !currentDirectoryHandle) {
        return;
      }

      const videoPlayer = document.getElementById('videoPlayer');
      const canvas = document.createElement('canvas');
      const ctx = canvas.getContext('2d');

      const targetWidth = 320;  // Adjust the target width for lower resolution
      const scaleFactor = targetWidth / videoPlayer.videoWidth;
      const targetHeight = videoPlayer.videoHeight * scaleFactor;

      canvas.width = targetWidth;
      canvas.height = targetHeight;
      ctx.drawImage(videoPlayer, 0, 0, canvas.width, canvas.height);

      const img = document.createElement('img');
      img.src = canvas.toDataURL();

      const cacheFileName = currentFile.name.replace(/\.[^/.]+$/, ".png");
      await saveThumbnail(img, cacheFileName, currentDirectoryHandle);
    }

    function playVideo(file) {
      const videoPlayer = document.getElementById('videoPlayer');
      videoPlayer.src = URL.createObjectURL(file);
      document.getElementById('videoPopup').style.display = 'flex';
      videoPlayer.play();

      // Adjust video size based on container size
      videoPlayer.addEventListener('loadedmetadata', () => {
        adjustVideoSize(videoPlayer);
      });

      videoPlayer.addEventListener('click', handleMouseClick);
      videoPlayer.addEventListener('touchstart', handleTouch, { passive: true }); // Handle touch events

      disableInfo(); // Disable info when playing video
    }

    function disableInfo() {
      showInfo = false;
      const fileContainer = document.getElementById('fileContainer');
      fileContainer.classList.remove('show-info');
    }

    function closePopup() {
      exitFullscreen();
      document.getElementById('videoPopup').style.display = 'none';
      const videoPlayer = document.getElementById('videoPlayer');
      videoPlayer.pause();
      videoPlayer.src = '';
      videoPlayer.removeEventListener('click', handleMouseClick);
      videoPlayer.removeEventListener('touchstart', handleTouch); // Remove touch event listener
    }

    function closeInfoPopup() {
      document.getElementById('infoPopup').style.display = 'none';
    }

    function showInfoPopup() {
      document.getElementById('infoPopup').style.display = 'flex';
    }

    function adjustVideoSize(videoPlayer) {
      const container = videoPlayer.parentElement;
      const containerAspectRatio = container.clientWidth / container.clientHeight;
      const videoAspectRatio = videoPlayer.videoWidth / videoPlayer.videoHeight;

      if (videoAspectRatio > containerAspectRatio) {
        videoPlayer.style.width = '100%';
        videoPlayer.style.height = 'auto';
      } else {
        videoPlayer.style.width = 'auto';
        videoPlayer.style.height = '100%';
      }

      if (videoPlayer.videoHeight > container.clientHeight) {
        videoPlayer.style.width = 'auto';
        videoPlayer.style.height = '100%';
      }
    }

    function handleMouseClick(event) {
      event.preventDefault(); // Prevent default mouse click behavior
      const videoPlayer = document.getElementById('videoPlayer');
      const rect = videoPlayer.getBoundingClientRect();
      const clickX = event.clientX - rect.left;

      if (clickX > rect.width / 3 && clickX < (rect.width / 3) * 2) {
        // Click in the middle third - toggle play/pause
        if (videoPlayer.paused) {
          videoPlayer.play();
        } else {
          videoPlayer.pause();
        }
      } else if (clickX < rect.width / 3) {
        // Click on the left third - rewind
        videoPlayer.currentTime = Math.max(0, videoPlayer.currentTime - 10);  // Rewind by 10 seconds
      } else {
        // Click on the right third - fast forward
        videoPlayer.currentTime = Math.min(videoPlayer.duration, videoPlayer.currentTime + 10);  // Fast forward by 10 seconds
      }
    }

    function handleTouch(event) {
      const videoPlayer = document.getElementById('videoPlayer');
      const rect = videoPlayer.getBoundingClientRect();
      const touchX = event.touches[0].clientX - rect.left;

      if (touchX > rect.width / 3 && touchX < (rect.width / 3) * 2) {
        // Touch in the middle third - toggle play/pause
        if (videoPlayer.paused) {
          videoPlayer.play();
        } else {
          videoPlayer.pause();
        }
      } else if (touchX < rect.width / 3) {
        // Touch on the left third - rewind
        videoPlayer.currentTime = Math.max(0, videoPlayer.currentTime - 10);  // Rewind by 10 seconds
      } else {
        // Touch on the right third - fast forward
        videoPlayer.currentTime = Math.min(videoPlayer.duration, videoPlayer.currentTime + 10);  // Fast forward by 10 seconds
      }
    }

    function toggleFullscreen() {
      const videoPopup = document.getElementById('videoPopup');
      if (!document.fullscreenElement) {
        if (videoPopup.requestFullscreen) {
          videoPopup.requestFullscreen();
        } else if (videoPopup.mozRequestFullScreen) { // Firefox
          videoPopup.mozRequestFullScreen();
        } else if (videoPopup.webkitRequestFullscreen) { // Chrome, Safari et Opera
          videoPopup.webkitRequestFullscreen();
        } else if (videoPopup.msRequestFullscreen) { // IE/Edge
          videoPopup.msRequestFullscreen();
        }
      } else {
        exitFullscreen();
      }
    }

    function exitFullscreen() {
      if (document.exitFullscreen) {
        document.exitFullscreen();
      } else if (document.mozCancelFullScreen) { // Firefox
        document.mozCancelFullScreen();
      } else if (document.webkitExitFullscreen) { // Chrome, Safari et Opera
        document.webkitExitFullscreen();
      } else if (document.msExitFullscreen) { // IE/Edge
        document.msExitFullscreen();
      }
    }

    function changeSpeed() {
      const videoPlayer = document.getElementById('videoPlayer');
      currentSpeedIndex = (currentSpeedIndex + 1) % speeds.length;
      videoPlayer.playbackRate = speeds[currentSpeedIndex];
      document.getElementById('speedButton').textContent = speeds[currentSpeedIndex] + 'x';
    }

    function speedUp() {
      const videoPlayer = document.getElementById('videoPlayer');
      if (currentSpeedIndex < speeds.length - 1) {
        currentSpeedIndex++;
        videoPlayer.playbackRate = speeds[currentSpeedIndex];
        document.getElementById('speedButton').textContent = speeds[currentSpeedIndex] + 'x';
      }
    }

    function speedDown() {
      const videoPlayer = document.getElementById('videoPlayer');
      if (currentSpeedIndex > 0) {
        currentSpeedIndex--;
        videoPlayer.playbackRate = speeds[currentSpeedIndex];
        document.getElementById('speedButton').textContent = speeds[currentSpeedIndex] + 'x';
      }
    }

    function saveScreenshot() {
      const videoPlayer = document.getElementById('videoPlayer');
      const canvas = document.createElement('canvas');
      const ctx = canvas.getContext('2d');

      // Set canvas dimensions to video dimensions
      canvas.width = videoPlayer.videoWidth;
      canvas.height = videoPlayer.videoHeight;

      // Draw the current frame of the video onto the canvas
      ctx.drawImage(videoPlayer, 0, 0, canvas.width, canvas.height);

      // Convert the canvas to a blob and then to a downloadable link
      canvas.toBlob(blob => {
        const a = document.createElement('a');
        a.href = URL.createObjectURL(blob);
        a.download = 'screenshot.png';
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
      }, 'image/png');
    }

    function handleKeydown(event) {
      const videoPlayer = document.getElementById('videoPlayer');
      switch (event.key) {
        case 'ArrowLeft':
          videoPlayer.currentTime = Math.max(0, videoPlayer.currentTime - 10);  // Rewind by 10 seconds
          break;
        case 'ArrowRight':
          videoPlayer.currentTime = Math.min(videoPlayer.duration, videoPlayer.currentTime + 10);  // Fast forward by 10 seconds
          break;
        case 'ArrowUp':
          speedUp();
          break;
        case 'ArrowDown':
          speedDown();
          break;
        case ' ':
          // Toggle play/pause with space bar
          if (videoPlayer.paused) {
            videoPlayer.play();
          } else {
            videoPlayer.pause();
          }
          event.preventDefault(); // Prevent default space bar behavior
          break;
        default:
          break;
      }
    }

    function showTooltip(text) {
      const tooltip = document.getElementById('videoTooltip');
      tooltip.textContent = text;
      tooltip.classList.add('show-tooltip');

      tooltipTimeout = setTimeout(() => {
        tooltip.classList.remove('show-tooltip');
      }, 2000); // Hide tooltip after 2 seconds
    }

    function hideTooltip() {
      clearTimeout(tooltipTimeout);
      const tooltip = document.getElementById('videoTooltip');
      tooltip.classList.remove('show-tooltip');
    }
  </script>
</body>
</html>
